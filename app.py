import streamlit as st
import numpy as np
import pandas as pd
import tensorflow as tf
import cv2
from PIL import Image
import class_names  # File ch·ª©a dictionary classes

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng",
    page_icon="üö¶",
    layout="wide"
)

# Ti√™u ƒë·ªÅ
st.title("üö¶ ·ª®ng d·ª•ng Nh·∫≠n di·ªán Bi·ªÉn b√°o Giao th√¥ng")
st.markdown("---")

# T·∫£i model
@st.cache_resource
def load_model():
    try:
        model = tf.keras.models.load_model('models/traffic_model.h5')
        return model
    except:
        st.error("Kh√¥ng t√¨m th·∫•y model! Vui l√≤ng train model tr∆∞·ªõc.")
        return None

model = load_model()

# Sidebar
st.sidebar.title("T√πy ch·ªçn")
option = st.sidebar.radio(
    "Ch·ªçn ch·∫ø ƒë·ªô:",
    ["üì§ Upload ·∫£nh", "üì∑ Ch·ª•p ·∫£nh", "‚ÑπÔ∏è Th√¥ng tin model"]
)

def preprocess_image(image):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o"""
    # Chuy·ªÉn ƒë·ªïi sang numpy array
    image = np.array(image)
    # Resize v·ªÅ 32x32
    image = cv2.resize(image, (32, 32))
    # Normalize
    image = image / 255.0
    return image

def predict_image(image, model):
    """D·ª± ƒëo√°n ·∫£nh"""
    processed_image = preprocess_image(image)
    prediction = model.predict(np.expand_dims(processed_image, axis=0))
    predicted_class = np.argmax(prediction)
    confidence = np.max(prediction)
    return predicted_class, confidence, prediction[0]

if option == "üì§ Upload ·∫£nh":
    st.header("Upload ·∫£nh bi·ªÉn b√°o")
    
    uploaded_file = st.file_uploader(
        "Ch·ªçn ·∫£nh bi·ªÉn b√°o giao th√¥ng", 
        type=['jpg', 'jpeg', 'png']
    )
    
    if uploaded_file is not None:
        # Hi·ªÉn th·ªã ·∫£nh
        image = Image.open(uploaded_file)
        col1, col2 = st.columns(2)
        
        with col1:
            st.image(image, caption="·∫¢nh ƒë√£ upload", use_column_width=True)
        
        with col2:
            if model is not None:
                with st.spinner("ƒêang nh·∫≠n di·ªán..."):
                    predicted_class, confidence, all_probs = predict_image(image, model)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.success("‚úÖ Nh·∫≠n di·ªán ho√†n t·∫•t!")
                st.write(f"**Bi·ªÉn b√°o:** {class_names.classes[predicted_class]}")
                st.write(f"**ƒê·ªô tin c·∫≠y:** {confidence*100:.2f}%")
                st.write(f"**M√£ bi·ªÉn b√°o:** {predicted_class}")
                
                # Hi·ªÉn th·ªã top 5 d·ª± ƒëo√°n
                st.subheader("Top 5 d·ª± ƒëo√°n:")
                top5_indices = np.argsort(all_probs)[-5:][::-1]
                for i, idx in enumerate(top5_indices):
                    st.write(f"{i+1}. {class_names.classes[idx]} - {all_probs[idx]*100:.2f}%")

elif option == "üì∑ Ch·ª•p ·∫£nh":
    st.header("Ch·ª•p ·∫£nh bi·ªÉn b√°o")
    
    camera_image = st.camera_input("Ch·ª•p ·∫£nh bi·ªÉn b√°o giao th√¥ng")
    
    if camera_image is not None:
        image = Image.open(camera_image)
        col1, col2 = st.columns(2)
        
        with col1:
            st.image(image, caption="·∫¢nh ƒë√£ ch·ª•p", use_column_width=True)
        
        with col2:
            if model is not None:
                with st.spinner("ƒêang nh·∫≠n di·ªán..."):
                    predicted_class, confidence, all_probs = predict_image(image, model)
                
                st.success("‚úÖ Nh·∫≠n di·ªán ho√†n t·∫•t!")
                st.write(f"**Bi·ªÉn b√°o:** {class_names.classes[predicted_class]}")
                st.write(f"**ƒê·ªô tin c·∫≠y:** {confidence*100:.2f}%")

else:
    st.header("Th√¥ng tin Model")
    
    st.subheader("üìä Ki·∫øn tr√∫c Model")
    st.code("""
    Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(32, 32, 3)),
        MaxPooling2D(2,2),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D(2,2),
        Conv2D(128, (3,3), activation='relu'),
        MaxPooling2D(2,2),
        Flatten(),
        Dense(256, activation='relu'),
        Dropout(0.5),
        Dense(43, activation='softmax')
    ])
    """)
    
    st.subheader("üìà Hi·ªáu su·∫•t")
    st.metric("ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p test", "99.55%")
    
    st.subheader("üìã C√°c l·ªõp bi·ªÉn b√°o")
    # Hi·ªÉn th·ªã m·ªôt s·ªë l·ªõp bi·ªÉn b√°o
    for i in range(0, 43, 5):
        cols = st.columns(5)
        for j, col in enumerate(cols):
            if i + j < 43:
                with col:
                    st.text(f"{i+j}: {class_names.classes[i+j]}")

# Footer
st.markdown("---")
st.markdown("·ª®ng d·ª•ng Nh·∫≠n di·ªán Bi·ªÉn b√°o Giao th√¥ng s·ª≠ d·ª•ng CNN")